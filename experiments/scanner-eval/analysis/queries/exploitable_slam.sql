-- Query used for the paper (table 5, Appendix A).
--
-- Group all exploitable SLAM gadgets by transmitter (load/store) and the technique that is required to exploit them.
-- We count each entry point as a single gadget, in line with SLAM's definition. 

select 	'call targets' AS type, transmitter,
sum(case when known_prefix == 0 then 1 else 0 end) as known_prefix,
sum(case when in_place_training == 0 then 1 else 0 end) as in_place_training,
sum(case when out_place_training == 0 then 1 else 0 end) as out_place_training,
count() as total
from 
(
	select transmitter,
	sum(case when in_place_training > 0 then 1 else 0 end) as "in_place_training",
	sum(case when out_place_training > 0 then 1 else 0 end) as "out_place_training",
	sum(case when known_prefix > 0 then 1 else 0 end) as "known_prefix"


	from

	(
		select 
		name, address, pc, transmitter,
		case when is_branch_dependent_from_secret == 'False' then 1 else 0 end as "in_place_training",
		case when is_branch_dependent_from_uncontrolled == 'False' then 1 else 0 end as "out_place_training",
		case when is_secret_entropy_high == 'False' then 1 else 0 end as "known_prefix"
		from call_gadgets
		where exploitable_w_slam == 'True' and base_has_indirect_secret_dependency == 'False'
	)
	group by address, transmitter
)
group by transmitter


UNION

select 	'jump targets' AS type, transmitter,
sum(case when known_prefix == 0 then 1 else 0 end) as known_prefix,
sum(case when in_place_training == 0 then 1 else 0 end) as in_place_training,
sum(case when out_place_training == 0 then 1 else 0 end) as out_place_training,
count() as total

from 
(
	select transmitter,
	sum(case when in_place_training > 0 then 1 else 0 end) as "in_place_training",
	sum(case when out_place_training > 0 then 1 else 0 end) as "out_place_training",
	sum(case when known_prefix > 0 then 1 else 0 end) as "known_prefix"


	from

	(
		select 
		name, address, pc, transmitter,
		case when is_branch_dependent_from_secret == 'False' then 1 else 0 end as "in_place_training",
		case when is_branch_dependent_from_uncontrolled == 'False' then 1 else 0 end as "out_place_training",
		case when is_secret_entropy_high == 'False' then 1 else 0 end as "known_prefix"
		from jump_gadgets
		where exploitable_w_slam == 'True' and base_has_indirect_secret_dependency == 'False'
	)
	group by address, transmitter
)
group by transmitter

UNION

-- Queries for the total numbers, present in the text of Appendix A

SELECT 'total SLAM gadgets' AS type, "-", "-", "-", "-", all_call_gadgets + all_jump_gadgets FROM

(
	select 	"1" as x, count(DISTINCT address) as all_call_gadgets
	from call_gadgets
	where exploitable_w_slam == 'True' and base_has_indirect_secret_dependency == 'False'
)
INNER JOIN
(
	select 	"1" as x, count(DISTINCT address) as all_jump_gadgets
	from jump_gadgets
	where exploitable_w_slam == 'True' and base_has_indirect_secret_dependency == 'False'
)
using (x)


UNION
select 	'total SLAM gadgets, call load+store' AS type, "-", "-", "-", "-", count(DISTINCT address)
from call_gadgets
where exploitable_w_slam == 'True' and base_has_indirect_secret_dependency == 'False'
and (transmitter == "TransmitterType.STORE" or transmitter == "TransmitterType.LOAD")

UNION

SELECT 'total SLAM gadgets, code-load' AS type, "-", "-", "-", "-", all_call_gadgets + all_jump_gadgets FROM

(
	select 	"1" as x, count(DISTINCT address) as all_call_gadgets
	from call_gadgets
	where exploitable_w_slam == 'True' and base_has_indirect_secret_dependency == 'False'
	and transmitter == "TransmitterType.CODE_LOAD"
)
INNER JOIN
(
	select 	"1" as x, count(DISTINCT address) as all_jump_gadgets
	from jump_gadgets
	where exploitable_w_slam == 'True' and base_has_indirect_secret_dependency == 'False'
	and transmitter == "TransmitterType.CODE_LOAD"
)
using (x)