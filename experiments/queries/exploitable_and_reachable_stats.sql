-- Query used for the paper (table 1).
--
-- Group all exploitable gadgets by transmitter (load/store) and the technique that is required to exploit them.
-- The numbers are reported for all gadgets found in call targets and jump targets, and for those found
-- in call targets that have been reported as reachable by syzcaller. 

SELECT 'call targets' AS type, transmitter, count(DISTINCT pc) as total,
sum(case when no_techniques > 0 then 1 else 0 end) as no_techniques,
sum(case when no_techniques == 0 AND (requires_prime_and_probe > 0   OR base_has_direct_secret_dependency  > 0) then 1 else 0 end) as requires_prime_and_probe,

sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0 AND base_has_direct_secret_dependency == 0 AND is_secret_below_cache_granularity > 0 then 1 else 0 end) as is_secret_below_cache_granularity,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_secret_entropy_high > 0 then 1 else 0 end) as is_secret_entropy_high,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_secret_entropy_high == 0 AND is_max_secret_too_high > 0 then 1 else 0 end) as is_max_secret_too_high,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_max_secret_too_high > 0 then 1 else 0 end) as is_max_secret_too_high_incl_high_entropy,


sum(case when no_techniques == 0 AND requires_prime_and_probe == 0  AND base_has_indirect_secret_dependency == 0 AND base_has_direct_secret_dependency > 0 then 1 else 0 end) as base_has_direct_secret_dependency,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0  AND base_has_indirect_secret_dependency > 0 then 1 else 0 end) as leak_secret_near_valid_base,
sum(case when no_techniques == 0 AND non_linear > 0 then 1 else 0 end) as non_linear,

sum(case when no_techniques == 0 AND sliding_and_prefix > 0 then 1 else 0 end) as sliding_and_prefix,
sum(case when no_techniques == 0 AND sliding_and_base_overflow > 0 then 1 else 0 end) as sliding_and_base_overflow,
sum(case when no_techniques == 0 AND prefix_and_base_overflow > 0 then 1 else 0 end) as prefix_and_base_overflow,

sum(case when no_techniques == 0 AND is_branch_dependent_from_secret > 0 then 1 else 0 end) as in_place_training,
sum(case when no_techniques == 0 AND is_branch_dependent_from_uncontrolled > 0 then 1 else 0 end) as out_of_place_training
FROM(
	
	SELECT name, pc, transmitter,
	sum(no_techniques) as no_techniques,
	sum(is_secret_below_cache_granularity) as is_secret_below_cache_granularity,
	sum(is_secret_entropy_high) as is_secret_entropy_high, 
	sum(is_max_secret_too_high) as is_max_secret_too_high, 
	sum(base_has_direct_secret_dependency) as base_has_direct_secret_dependency,
	sum(base_has_indirect_secret_dependency) as base_has_indirect_secret_dependency,
	sum(is_branch_dependent_from_secret) as is_branch_dependent_from_secret,
	sum(is_branch_dependent_from_uncontrolled) as is_branch_dependent_from_uncontrolled,
	
	sum(sliding_and_prefix) as sliding_and_prefix,
	sum(sliding_and_base_overflow) as sliding_and_base_overflow,
	sum(prefix_and_base_overflow) as prefix_and_base_overflow,
	
	sum(requires_prime_and_probe) as requires_prime_and_probe,
	sum(non_linear) as non_linear,
	
	sum(case when no_techniques == 0 AND is_branch_dependent_from_secret > 0 then 1 else 0 end) as in_place_training,
	sum(case when no_techniques == 0 AND is_branch_dependent_from_uncontrolled > 0 then 1 else 0 end) as out_of_place_training
	
	FROM
	(
		SELECT transmitter, name, pc, case when (is_secret_below_cache_granularity = 'False' AND is_secret_entropy_high = 'False' 
													AND is_max_secret_too_high = 'False' AND base_has_direct_secret_dependency = 'False'
													AND base_has_indirect_secret_dependency = 'False' AND is_branch_dependent_from_secret = 'False'
													AND is_branch_dependent_from_uncontrolled = 'False'
													AND base_control = 'ControlType.CONTROLLED') 
													then 1 else 0 end as no_techniques,
		case when (is_secret_below_cache_granularity == 'False') then 0 else 1 end as is_secret_below_cache_granularity,
		case when (is_secret_entropy_high == 'False') then 0 else 1 end as is_secret_entropy_high,
		case when (is_max_secret_too_high == 'False') then 0 else 1 end as is_max_secret_too_high,
		case when (base_has_direct_secret_dependency == 'False') then 0 else 1 end as base_has_direct_secret_dependency,
		case when (base_has_indirect_secret_dependency == 'False') then 0 else 1 end as base_has_indirect_secret_dependency,
		case when (is_branch_dependent_from_secret == 'False') then 0 else 1 end as is_branch_dependent_from_secret,
		case when (is_branch_dependent_from_uncontrolled == 'False') then 0 else 1 end as is_branch_dependent_from_uncontrolled,
		case when (base_control == 'ControlType.CONTROLLED') then 0 else 1 end as requires_prime_and_probe,
		case when (n_branches == 0) then 0 else 1 end as non_linear,
		
		case when (is_secret_below_cache_granularity == 'True' and is_secret_entropy_high == 'True') then 1 else 0 end as sliding_and_prefix,
		case when (is_secret_below_cache_granularity == 'True' and is_max_secret_too_high == 'True') then 1 else 0 end as sliding_and_base_overflow,
		case when (is_secret_entropy_high == 'True' and is_max_secret_too_high == 'True') then 1 else 0 end as prefix_and_base_overflow
		
		from call_gadgets
		where exploitable='True'
		and base_has_indirect_secret_dependency = 'False'
-- 		AND n_branches = 0
	)
	group by pc, transmitter
)
group by transmitter

union ALL

SELECT 'reachable call targets' AS type, transmitter, count(DISTINCT pc) as total,
sum(case when no_techniques > 0 then 1 else 0 end) as no_techniques,
sum(case when no_techniques == 0 AND (requires_prime_and_probe > 0   OR base_has_direct_secret_dependency  > 0) then 1 else 0 end) as requires_prime_and_probe,

sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0 AND base_has_direct_secret_dependency == 0 AND is_secret_below_cache_granularity > 0 then 1 else 0 end) as is_secret_below_cache_granularity,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_secret_entropy_high > 0 then 1 else 0 end) as is_secret_entropy_high,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_secret_entropy_high == 0 AND is_max_secret_too_high > 0 then 1 else 0 end) as is_max_secret_too_high,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_max_secret_too_high > 0 then 1 else 0 end) as is_max_secret_too_high_incl_high_entropy,


sum(case when no_techniques == 0 AND requires_prime_and_probe == 0  AND base_has_indirect_secret_dependency == 0 AND base_has_direct_secret_dependency > 0 then 1 else 0 end) as base_has_direct_secret_dependency,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0  AND base_has_indirect_secret_dependency > 0 then 1 else 0 end) as leak_secret_near_valid_base,
sum(case when no_techniques == 0 AND non_linear > 0 then 1 else 0 end) as non_linear,

sum(case when no_techniques == 0 AND sliding_and_prefix > 0 then 1 else 0 end) as sliding_and_prefix,
sum(case when no_techniques == 0 AND sliding_and_base_overflow > 0 then 1 else 0 end) as sliding_and_base_overflow,
sum(case when no_techniques == 0 AND prefix_and_base_overflow > 0 then 1 else 0 end) as prefix_and_base_overflow,

sum(case when no_techniques == 0 AND is_branch_dependent_from_secret > 0 then 1 else 0 end) as in_place_training,
sum(case when no_techniques == 0 AND is_branch_dependent_from_uncontrolled > 0 then 1 else 0 end) as out_of_place_training
FROM(
	
	SELECT name, pc, transmitter,
	sum(no_techniques) as no_techniques,
	sum(is_secret_below_cache_granularity) as is_secret_below_cache_granularity,
	sum(is_secret_entropy_high) as is_secret_entropy_high, 
	sum(is_max_secret_too_high) as is_max_secret_too_high, 
	sum(base_has_direct_secret_dependency) as base_has_direct_secret_dependency,
	sum(base_has_indirect_secret_dependency) as base_has_indirect_secret_dependency,
	sum(is_branch_dependent_from_secret) as is_branch_dependent_from_secret,
	sum(is_branch_dependent_from_uncontrolled) as is_branch_dependent_from_uncontrolled,
	
	sum(sliding_and_prefix) as sliding_and_prefix,
	sum(sliding_and_base_overflow) as sliding_and_base_overflow,
	sum(prefix_and_base_overflow) as prefix_and_base_overflow,
	
	sum(requires_prime_and_probe) as requires_prime_and_probe,
	sum(non_linear) as non_linear,
	
	sum(case when no_techniques == 0 AND is_branch_dependent_from_secret > 0 then 1 else 0 end) as in_place_training,
	sum(case when no_techniques == 0 AND is_branch_dependent_from_uncontrolled > 0 then 1 else 0 end) as out_of_place_training
	
	FROM
	(
		SELECT transmitter, name, pc, case when (is_secret_below_cache_granularity = 'False' AND is_secret_entropy_high = 'False' 
													AND is_max_secret_too_high = 'False' AND base_has_direct_secret_dependency = 'False'
													AND base_has_indirect_secret_dependency = 'False' AND is_branch_dependent_from_secret = 'False'
													AND is_branch_dependent_from_uncontrolled = 'False'
													AND base_control = 'ControlType.CONTROLLED') 
													then 1 else 0 end as no_techniques,
		case when (is_secret_below_cache_granularity == 'False') then 0 else 1 end as is_secret_below_cache_granularity,
		case when (is_secret_entropy_high == 'False') then 0 else 1 end as is_secret_entropy_high,
		case when (is_max_secret_too_high == 'False') then 0 else 1 end as is_max_secret_too_high,
		case when (base_has_direct_secret_dependency == 'False') then 0 else 1 end as base_has_direct_secret_dependency,
		case when (base_has_indirect_secret_dependency == 'False') then 0 else 1 end as base_has_indirect_secret_dependency,
		case when (is_branch_dependent_from_secret == 'False') then 0 else 1 end as is_branch_dependent_from_secret,
		case when (is_branch_dependent_from_uncontrolled == 'False') then 0 else 1 end as is_branch_dependent_from_uncontrolled,
		case when (base_control == 'ControlType.CONTROLLED') then 0 else 1 end as requires_prime_and_probe,
		case when (n_branches == 0) then 0 else 1 end as non_linear,
		
		case when (is_secret_below_cache_granularity == 'True' and is_secret_entropy_high == 'True') then 1 else 0 end as sliding_and_prefix,
		case when (is_secret_below_cache_granularity == 'True' and is_max_secret_too_high == 'True') then 1 else 0 end as sliding_and_base_overflow,
		case when (is_secret_entropy_high == 'True' and is_max_secret_too_high == 'True') then 1 else 0 end as prefix_and_base_overflow
		
		from call_gadgets
		where exploitable='True'
		AND
		name in (SELECT name FROM reachable)
		and base_has_indirect_secret_dependency = 'False'
-- 		AND n_branches = 0
	)
	group by pc, transmitter
)
group by transmitter

union ALL

SELECT 'jump targets' AS type, transmitter, count(DISTINCT pc) as total,
sum(case when no_techniques > 0 then 1 else 0 end) as no_techniques,
sum(case when no_techniques == 0 AND (requires_prime_and_probe > 0   OR base_has_direct_secret_dependency  > 0) then 1 else 0 end) as requires_prime_and_probe,

sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0 AND base_has_direct_secret_dependency == 0 AND is_secret_below_cache_granularity > 0 then 1 else 0 end) as is_secret_below_cache_granularity,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_secret_entropy_high > 0 then 1 else 0 end) as is_secret_entropy_high,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_secret_entropy_high == 0 AND is_max_secret_too_high > 0 then 1 else 0 end) as is_max_secret_too_high,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0 AND base_has_indirect_secret_dependency == 0  AND base_has_direct_secret_dependency == 0 AND is_max_secret_too_high > 0 then 1 else 0 end) as is_max_secret_too_high_incl_high_entropy,


sum(case when no_techniques == 0 AND requires_prime_and_probe == 0  AND base_has_indirect_secret_dependency == 0 AND base_has_direct_secret_dependency > 0 then 1 else 0 end) as base_has_direct_secret_dependency,
sum(case when no_techniques == 0 AND requires_prime_and_probe == 0  AND base_has_indirect_secret_dependency > 0 then 1 else 0 end) as leak_secret_near_valid_base,
sum(case when no_techniques == 0 AND non_linear > 0 then 1 else 0 end) as non_linear,

sum(case when no_techniques == 0 AND sliding_and_prefix > 0 then 1 else 0 end) as sliding_and_prefix,
sum(case when no_techniques == 0 AND sliding_and_base_overflow > 0 then 1 else 0 end) as sliding_and_base_overflow,
sum(case when no_techniques == 0 AND prefix_and_base_overflow > 0 then 1 else 0 end) as prefix_and_base_overflow,

sum(case when no_techniques == 0 AND is_branch_dependent_from_secret > 0 then 1 else 0 end) as in_place_training,
sum(case when no_techniques == 0 AND is_branch_dependent_from_uncontrolled > 0 then 1 else 0 end) as out_of_place_training
FROM(
	
	SELECT name, pc, transmitter,
	sum(no_techniques) as no_techniques,
	sum(is_secret_below_cache_granularity) as is_secret_below_cache_granularity,
	sum(is_secret_entropy_high) as is_secret_entropy_high, 
	sum(is_max_secret_too_high) as is_max_secret_too_high, 
	sum(base_has_direct_secret_dependency) as base_has_direct_secret_dependency,
	sum(base_has_indirect_secret_dependency) as base_has_indirect_secret_dependency,
	sum(is_branch_dependent_from_secret) as is_branch_dependent_from_secret,
	sum(is_branch_dependent_from_uncontrolled) as is_branch_dependent_from_uncontrolled,
	
	sum(sliding_and_prefix) as sliding_and_prefix,
	sum(sliding_and_base_overflow) as sliding_and_base_overflow,
	sum(prefix_and_base_overflow) as prefix_and_base_overflow,
	
	sum(requires_prime_and_probe) as requires_prime_and_probe,
	sum(non_linear) as non_linear,
	
	sum(case when no_techniques == 0 AND is_branch_dependent_from_secret > 0 then 1 else 0 end) as in_place_training,
	sum(case when no_techniques == 0 AND is_branch_dependent_from_uncontrolled > 0 then 1 else 0 end) as out_of_place_training
	
	FROM
	(
		SELECT transmitter, name, pc, case when (is_secret_below_cache_granularity = 'False' AND is_secret_entropy_high = 'False' 
													AND is_max_secret_too_high = 'False' AND base_has_direct_secret_dependency = 'False'
													AND base_has_indirect_secret_dependency = 'False' AND is_branch_dependent_from_secret = 'False'
													AND is_branch_dependent_from_uncontrolled = 'False'
													AND base_control = 'ControlType.CONTROLLED') 
													then 1 else 0 end as no_techniques,
		case when (is_secret_below_cache_granularity == 'False') then 0 else 1 end as is_secret_below_cache_granularity,
		case when (is_secret_entropy_high == 'False') then 0 else 1 end as is_secret_entropy_high,
		case when (is_max_secret_too_high == 'False') then 0 else 1 end as is_max_secret_too_high,
		case when (base_has_direct_secret_dependency == 'False') then 0 else 1 end as base_has_direct_secret_dependency,
		case when (base_has_indirect_secret_dependency == 'False') then 0 else 1 end as base_has_indirect_secret_dependency,
		case when (is_branch_dependent_from_secret == 'False') then 0 else 1 end as is_branch_dependent_from_secret,
		case when (is_branch_dependent_from_uncontrolled == 'False') then 0 else 1 end as is_branch_dependent_from_uncontrolled,
		case when (base_control == 'ControlType.CONTROLLED') then 0 else 1 end as requires_prime_and_probe,
		case when (n_branches == 0) then 0 else 1 end as non_linear,
		
		case when (is_secret_below_cache_granularity == 'True' and is_secret_entropy_high == 'True') then 1 else 0 end as sliding_and_prefix,
		case when (is_secret_below_cache_granularity == 'True' and is_max_secret_too_high == 'True') then 1 else 0 end as sliding_and_base_overflow,
		case when (is_secret_entropy_high == 'True' and is_max_secret_too_high == 'True') then 1 else 0 end as prefix_and_base_overflow
		
		from jump_gadgets
		where exploitable='True'
		and base_has_indirect_secret_dependency = 'False'
-- 		AND n_branches = 0
	)
	group by pc, transmitter
)
group by transmitter
